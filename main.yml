name:workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  content: read

jobs:
  itegration:
    name:Contineous Integration
    runs-on: ubantu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name:Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"
  build-and-push-ecr-image:
    name: Contineous Delivery
    needs: integration
    runs-on: ubantu-latest 
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Utilities
      run: |
        sudo apt-get update
        sudo apt-get install -y jq unzip
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
        id: login-ecr 
        uses: aws-actions/amazon-ecr-login@v1

    - name: Build,tag,and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTORY: ${{ steps.login-ecr.output.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: lastest
        run: |
        # Build a docker container and 
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$Image_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$Image_TAG
        eco "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$Image_TAG"

  Contineous-Deployment:
    needs: build-and-push-ecr-image
    rus-on: self-hosted
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr 
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest images
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME}}:latest
      #- name: stop and remove container if running 
      #run: |
      #docker ps -q --filter "name-mltest" | grep -q
      - name: Run Docker Image to serve users
        run: |
        docker -d -p 8080:8080 --ipc = "host" --name=mltest -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        -e 'AWS_REGION=${{ secrets.AWS_REGION }}' ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME}}:latest
      - name: Clean previous images and containers 
        run: |
        docker system prune -f



